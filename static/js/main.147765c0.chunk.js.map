{"version":3,"sources":["components/news/NewsList.js","components/news/NewsAPI.js","components/stock/ShowStockData.js","components/stock/StockMain.js","components/canvas/Canvas.js","components/canvas/CanvasMain.js","App.js","serviceWorker.js","index.js"],"names":["NewsList","articles","className","style","display","map","article","i","minHeight","padding","width","border","margin","key","title","NewsAPI","useState","error","setError","isLoaded","setIsLoaded","news","setNews","useEffect","fetch","then","res","json","result","message","Plotly","window","Plot","createPlotlyComponent","ShowStockData","xAxis","yAxis","stockSymbol","data","x","y","type","mode","marker","color","layout","height","StockMain","loaded","setLoaded","setXAxis","setYAxis","setStockSymbol","onSubmit","e","preventDefault","console","log","a","getXValues","getYValues","response","push","getData","placeholder","onChange","target","value","Canvas","canvasRef","useRef","contextRef","isDrawing","setIsDrawing","canvas","current","context","getContext","scale","lineCap","strokeStyle","lineWidth","onMouseDown","nativeEvent","offsetX","offsetY","beginPath","moveTo","onMouseUp","closePath","onMouseMove","lineTo","stroke","ref","CanvasMain","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.147765c0.chunk.js","sourcesContent":["import React from 'react';\n\nconst NewsList = ({articles}) => {\nreturn (\n  <div className=\"news-container\" style={{display: \"flex\"}}>\n    {articles.map((article,i) => (\n    <div className=\"news-article\" \n      style={{minHeight: \"100%\", \n        padding: \"50px\", \n        width: \"200px\", \n        border: \"1px solid lightgray\", \n        margin: \"25px\"}} \n      key={i}>\n        <div><span>Title: {article.title}</span></div>\n    </div>\n  ))}\n  </div>\n)\n}\n\nexport default NewsList;","import React, { useState, useEffect } from 'react';\nimport NewsList from './NewsList';\n\n\nconst NewsAPI = () => {\n  const [error, setError] = useState(null)\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [ news, setNews ] = useState([])\n\n  useEffect(() => {\n    fetch('https://newsapi.org/v2/top-headlines?country=us&apiKey=4414b55b3dca44eda1681cfb1214c5b2&pageSize=5')\n      .then(res => res.json())\n      .then(\n        (result) => {\n          setIsLoaded(true);\n          setNews(result.articles)\n        },\n        (error) => {\n          setIsLoaded(true);\n          setError(error);\n        }\n      )\n  }, [])\n  \n  if(error) {\n    return <div>Error: {error.message}</div>\n  } else if (!isLoaded) {\n    return <div>Loading...</div>\n  } else {\n    return (\n      <div>\n        <h3>Top Headlines</h3>\n        <ul>\n          <NewsList articles={news}/>\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default NewsAPI;","import React from 'react';\nimport createPlotlyComponent from 'react-plotly.js/factory';\nconst Plotly = window.Plotly;\nconst Plot = createPlotlyComponent(Plotly);\n\nconst ShowStockData = ({xAxis,yAxis,stockSymbol}) => {\n  \n  return (\n    <Plot\n      data={[\n        {\n          x: xAxis,\n          y: yAxis,\n          type: 'scatter',\n          mode: 'lines+markers',\n          marker: {color: 'red'},\n        }\n      ]}\n      layout={{width: 720, height: 440, title: `${stockSymbol}`}}\n    />\n  )\n}\n\nexport default ShowStockData;","import React, { useState} from 'react';\nimport ShowStockData from './ShowStockData';\n\nconst StockMain = () => {\n  const [loaded, setLoaded] = useState(false)\n  const [xAxis, setXAxis ] = useState([])\n  const [yAxis, setYAxis ] = useState([])\n  const [stockSymbol, setStockSymbol] = useState('')\n  \nconst submitHandler = (e) => {\n e.preventDefault();\n console.log(stockSymbol)\n const getData = async () => {\n  const getXValues = [];\n  const getYValues = [];\n\n  const response = await fetch(`https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${stockSymbol}&apikey=ZHSQDBJFT1MY4Z4Q`)\n  const data = await response.json()\n  for(let key in data['Time Series (Daily)']) {\n    getXValues.push(key)\n    getYValues.push(data['Time Series (Daily)'][key]['1. open'])\n  }\n  setXAxis(getXValues)\n  setYAxis(getYValues)\n  setLoaded(true)\n}\ngetData();\n}\n\nconst changeHandler = (e) => {\n  setStockSymbol(e.target.value)\n}\n\n  return (\n    <div>\n      <h3>Search for latest stock information</h3>\n      <form onSubmit={submitHandler}>\n          <input \n            type=\"search\" \n            placeholder=\"Type ticker symbol here\"\n            onChange={changeHandler} \n          />\n          <button type=\"submit\">Search</button>\n      </form>\n      {loaded && \n      <ShowStockData xAxis={xAxis} yAxis={yAxis} stockSymbol={stockSymbol}/>\n      }\n    </div>   \n  )\n}\n\nexport default StockMain;\n\n","import React, {useRef, useEffect, useState} from 'react';\n\nconst Canvas = () => {\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.width = 400 * 2;\n    canvas.height = 400 * 2;\n    canvas.style.width = '400px';\n    canvas.style.height = '400px';\n\n    const context = canvas.getContext(\"2d\");\n    context.scale(2,2)\n    context.lineCap = \"round\"\n    context.strokeStyle = \"black\"\n    context.lineWidth = 5\n    contextRef.current = context;\n  }, [])\n\n  const startDrawing = ({nativeEvent}) => {\n    const {offsetX, offsetY} = nativeEvent;\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(offsetX,offsetY)\n    setIsDrawing(true)\n  }\n\n\n  const finishDrawing = () => {\n    contextRef.current.closePath();\n    setIsDrawing(false)\n  }\n\n  const draw = ({nativeEvent}) => {\n    if(!isDrawing) {\n      return\n    }\n    const {offsetX, offsetY} = nativeEvent;\n    contextRef.current.lineTo(offsetX, offsetY);\n    contextRef.current.stroke()\n  }\n\n  return (\n    <>\n      <canvas \n      onMouseDown={startDrawing}\n      onMouseUp={finishDrawing}\n      onMouseMove={draw}\n      ref={canvasRef}\n      className=\"canvas\"/>\n      <button>Save image</button>\n    </>\n  )\n}\n\nexport default Canvas;","import React from 'react';\nimport Canvas from './Canvas';\n\n\n\nconst CanvasMain = () => {\n  return (\n    <div className=\"canvasContainer\">\n      <h3>Draw something on the canvas</h3>\n      <Canvas />\n    </div>\n  )\n}\n\nexport default CanvasMain;","import React from 'react';\nimport './App.css';\nimport NewsAPI from './components/news/NewsAPI';\nimport StockMain from './components/stock/StockMain';\nimport CanvasMain from './components/canvas/CanvasMain';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NewsAPI />\n      <StockMain />\n      <CanvasMain />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}